# ======================================================
#               üîí GITHUB WORKFLOW üîí        
# ======================================================
# üö® DO NOT MODIFY THIS FILE üö®
#
# This workflow (`update-local-repo.yml`) is protected
# by a SHA256 integrity check script.
#
# Any changes ‚Äî even whitespace or comments ‚Äî will
# cause the build to FAIL.
#
# If edits are required, notify the maintainer and
# update the hash in: github-workflow-verification_v1.sh
#
# shasum -a 256 .github/workflows/update-local-repo.yml
#
# ======================================================




name: Update Local Repository and Run Sonar Scanner

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-and-scan:
    runs-on: self-hosted
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      PROJECT_KEY: ${{ github.event.repository.name }}
      RELEASE_NUM: ${{ github.run_number }}
      SONAR_BRANCH_NAME: ${{ github.ref_name }}
      SONAR_HOST: http://sonarqube:9000
      SOURCE_DATABASE: DATAOPS
      SOURCE_SCHEMA: IOT_RAW_v001
      CLONE_DATABASE: DATAOPS
      CLONE_SCHEMA: IOT_CLONE
      SNOW_CONFIG_B64: ${{ secrets.SNOW_CONFIG_B64 }}
      CONNECTION_NAME: ${{ secrets.SNOW_CONNECTION_NAME }}

    steps:
      - name: üîß Set up dynamic base directories
        run: |
          echo "BASE_DIR_PROJECT=$HOME/workspace/${PROJECT_KEY}" >> $GITHUB_ENV

      - name: üìõ Show repo info
        run: |
          echo "üì¶ Project: $PROJECT_KEY"
          echo "üîÄ Branch: $SONAR_BRANCH_NAME"
          echo "üìå Release #: $RELEASE_NUM"
          echo "üóÇ BASE_DIR_PROJECT: $BASE_DIR_PROJECT"

      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîÑ Pull latest changes
        run: git pull

      - name: üîß Set up github runner env
        run: |
          bash /usr/local/bin/github-runner_v1.sh

      - name: ‚úÖ GitHub Actions workflow validates
        run: |
          bash github-workflow-verification_v1.sh

      - name: ‚ùÑÔ∏è Extract dependencies
        run: |
          bash /usr/local/bin/snowflake-extract-dependencies_v1.sh \
            --SOURCE_DATABASE=$SOURCE_DATABASE \
            --SOURCE_SCHEMA=$SOURCE_SCHEMA \
            --CONNECTION_NAME=$CONNECTION_NAME    

      - name: üß™ Run Sonar Scanner
        run: |
          bash /usr/local/bin/sonar-scanner_v2.sh

      - name: ‚úÖ Wait for Quality Gate to complete
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: '.scannerwork/report-task.txt'

      - name: ‚ùÑÔ∏è Run Snowflake Schema Cloning
        run: |
          bash /usr/local/bin/snowflake-clone-db_v2.sh \
            --SOURCE_DATABASE=$SOURCE_DATABASE \
            --SOURCE_SCHEMA=$SOURCE_SCHEMA \
            --CLONE_DATABASE=$CLONE_DATABASE \
            --CLONE_SCHEMA=$CLONE_SCHEMA \
            --RELEASE_NUM=$RELEASE_NUM \
            --CONNECTION_NAME=$CONNECTION_NAME

      - name: üèóÔ∏è Run Snowflake Deploy Structure
        run: |
          bash /usr/local/bin/snowflake-deploy-structure_v2.sh \
            --PROJECT_KEY=$PROJECT_KEY \
            --CLONE_DATABASE=$CLONE_DATABASE \
            --CLONE_SCHEMA=$CLONE_SCHEMA \
            --RELEASE_NUM=$RELEASE_NUM \
            --CONNECTION_NAME=$CONNECTION_NAME

      - name: üîç Run SQL Validation Tests
        run: |
          bash /usr/local/bin/sql_validation_v4.sh \
            --CLONE_DATABASE=$CLONE_DATABASE \
            --CLONE_SCHEMA=$CLONE_SCHEMA \
            --RELEASE_NUM=$RELEASE_NUM \
            --CONNECTION_NAME=$CONNECTION_NAME \
            --TEST_FILE="/home/docker/actions-runner/_work/$PROJECT_KEY/$PROJECT_KEY/sqlunit/tests.sqltest"

      - name: üßπ Drop Cloned Schema After Tests
        run: |
          bash /usr/local/bin/snowflake-drop-clone-db_v2.sh \
            --CLONE_DATABASE=$CLONE_DATABASE \
            --CLONE_SCHEMA=$CLONE_SCHEMA \
            --RELEASE_NUM=$RELEASE_NUM \
            --CONNECTION_NAME=$CONNECTION_NAME

      - name: üì¶ Zip source files
        run: |
          zip -r release.zip . -x '*.git*' '*.scannerwork*'

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.run_number }}
          tag_name: v${{ github.run_number }}
          files: release.zip
          token: ${{ secrets.GITHUB_TOKEN }}
